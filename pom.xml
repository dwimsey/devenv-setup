<project xmlns="http://maven.apache.org/POM/4.0.0"
		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
         http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.bandwidth.backoffice</groupId>
	<artifactId>devenv-setup</artifactId>
	<packaging>jar</packaging>
	<version>0.0.0-SNAPSHOT</version>
	<name>Bandwidth Backoffice Development Workstation Setup</name>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.rootDir>${project.basedir}/..</project.rootDir>
		<!--
			This file is used so we can detect that the 'pre-setup' work has been done and skip it in future builds
			since there is no reason to 'setup' VMs on ever single pass
		-->
		<vagrant.setup.complete.marker.filename>${project.basedir}/vagrant-setup-complete</vagrant.setup.complete.marker.filename>
		<!--
			This setting allows us to rapidly switch what backend we use for vagrant.  If left blank, vagrant will
			figure it out on its own, if it can find a virtualization environment on the host running this build
		-->
		<vagrant.provider.arg>--provider=virtualbox</vagrant.provider.arg>
		<!--
			The version of vagrant we use, this makes it easy to change the version we download from the vagrant website
		-->
		<vagrant.version>1.8.5</vagrant.version>
		<!--
			this package extension should be detected based on the OS, here its hard coded as DMG
			since this is a prototype/demonstration at this stage.  This is used to pull down and install vagrant
			auto-magically on OSX and Windows.  apt/yum should be used on Linux as appropriate.
		-->
		<vagrant.package.ext>dmg</vagrant.package.ext>
		<!--
			This is were we can find the public vagrant packages.  We really should pull them internally and have our
			own 'cache' of these files
		-->
		<vagrant.download.url>https://releases.hashicorp.com/vagrant/${vagrant.version}/vagrant_${vagrant.version}.${vagrant.package.ext}</vagrant.download.url>
	</properties>
	<profiles>
		<profile>
			<!--
				This profile is intended to only be used when in a clean checkout/unconfigured environment
			-->
			<activation>
				<file>
					<missing>${vagrant.setup.complete.marker.filename}</missing>
				</file>
				<!-- file>
					<missing>/vagrant/${vagrant.setup.complete.marker.filename}</missing>
				</file -->
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>1.5.0</version>
						<configuration>
							<workingDirectory>${project.rootDir}</workingDirectory>
						</configuration>
						<executions>
							<execution>
								<id>vg-setup</id>
								<phase>initialize</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>vagrant</executable>
									<arguments>
										<argument>plugin</argument>
										<argument>install</argument>
										<!-- This plugin allows us to easily configure /etc/hosts on the local and remote machines by letting vagrant do the lifting -->
										<argument>vagrant-hostmanager</argument>
										<!-- This plugin allows vagrant to manage/update the VirtualBox guest additions -->
										<argument>vagrant-vbguest</argument>
										<!-- This plugin allows vagrant to reboot a VM as the final stage of provisioning -->
										<argument>vagrant-reload</argument>
									</arguments>
								</configuration>
							</execution>
							<execution>
								<id>vg-touch</id>
								<phase>initialize</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>touch</executable>
									<arguments>
										<argument>${vagrant.setup.complete.marker.filename}</argument>
									</arguments>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
	<build>
		<plugins>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>1.5.0</version>
				<configuration>
					<workingDirectory>${project.rootDir}</workingDirectory>
				</configuration>
				<executions>
					<execution>
						<id>vg-clean</id>
						<phase>clean</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>vagrant</executable>
							<arguments>
								<argument>destroy</argument>
								<argument>-f</argument>
							</arguments>
						</configuration>
					</execution>
					<execution>
						<id>vg-init</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>vagrant</executable>
							<arguments>
								<argument>up</argument>
								<argument>${vagrant.provider.arg}</argument>
							</arguments>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>
